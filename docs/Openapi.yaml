openapi: 3.1.0
info:
  title: PosiPost API (MVP)
  version: 0.2.0
  summary: SNSアプリのMVP向けAPI仕様（ドラフト公開・ポジティブ度判定・ポジティブリアクション）。
  description: |
    本APIはMVP範囲のエンドポイントを定義します。
    - 認証はOAuth2/OIDC（Google/Apple）。APIアクセスは短命のBearerアクセストークンを使用。
    - リフレッシュはHttpOnlyクッキー（`refresh_token`）で実施。
    - 投稿はドラフト→公開の二段階。公開時にサーバ側でポジティブ度をスコアリング。
    - スコアがしきい値未満の場合は公開をブロックし、改善提案を返却。
    - リアクションは「LIKE/EMPATHY/THANKS/SUPPORT」の4種のうち同時に1種のみ。
servers:
  - url: https://api.posipost.example.com
    description: Production (例)
  - url: https://staging.api.posipost.example.com
    description: Staging (例)
security:
  - bearerAuth: []

paths:
  /healthz:
    get:
      operationId: getHealthz
      summary: ヘルスチェック
      security: []
      responses:
        '200':
          description: OK

  /v1/auth/providers:
    get:
      operationId: listAuthProviders
      summary: 利用可能な認証プロバイダ一覧
      description: クライアントがログインUX構成のために使用。例: ['google','apple']。
      security: []
      tags: [Auth]
      responses:
        '200':
          description: 取得成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  providers:
                    type: array
                    items:
                      type: string
                      enum: [google, apple]

  /v1/auth/refresh:
    post:
      operationId: refreshAccessToken
      summary: アクセストークンのリフレッシュ
      description: HttpOnlyクッキーの`refresh_token`を用いて新しいアクセストークンを発行。
      tags: [Auth]
      security:
        - refreshTokenCookie: []
      responses:
        '200':
          description: 更新成功
          headers:
            X-RateLimit-Limit:
              $ref: '#/components/headers/X-RateLimit-Limit'
            X-RateLimit-Remaining:
              $ref: '#/components/headers/X-RateLimit-Remaining'
            X-RateLimit-Reset:
              $ref: '#/components/headers/X-RateLimit-Reset'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: リフレッシュトークン無効/期限切れ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/auth/logout:
    post:
      operationId: logout
      summary: ログアウト（リフレッシュ無効化）
      description: リフレッシュトークンを失効し、クッキーを削除。
      tags: [Auth]
      security:
        - refreshTokenCookie: []
      responses:
        '204':
          description: ログアウト成功（ボディなし）

  /v1/drafts:
    post:
      operationId: createDraft
      summary: 下書き作成
      tags: [Drafts]
      parameters:
        - $ref: '#/components/parameters/IdempotencyKey'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DraftCreateRequest'
            examples:
              default:
                value:
                  text: '今日は素敵な気づきがありました。'
      responses:
        '201':
          description: 作成成功
          headers:
            Location:
              description: 作成された下書きのURL
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DraftResponse'
        '400':
          description: 入力不正
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: レート制限超過
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/drafts/{draftId}:
    get:
      operationId: getDraft
      summary: 下書き取得
      tags: [Drafts]
      parameters:
        - $ref: '#/components/parameters/DraftIdParam'
      responses:
        '200':
          description: 取得成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DraftResponse'
        '404':
          description: 見つからない
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      operationId: updateDraft
      summary: 下書き更新
      tags: [Drafts]
      parameters:
        - $ref: '#/components/parameters/DraftIdParam'
        - $ref: '#/components/parameters/IdempotencyKey'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DraftCreateRequest'
      responses:
        '200':
          description: 更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DraftResponse'
        '404':
          description: 見つからない
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      operationId: deleteDraft
      summary: 下書き削除
      tags: [Drafts]
      parameters:
        - $ref: '#/components/parameters/DraftIdParam'
      responses:
        '204':
          description: 削除成功（ボディなし）
        '404':
          description: 見つからない
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/drafts/{draftId}:publish:
    post:
      operationId: publishDraft
      summary: 下書きの公開（ポジティブ度判定）
      description: スコアがしきい値未満の場合は公開せず、提案を返却します。
      tags: [Drafts, Posts]
      parameters:
        - $ref: '#/components/parameters/DraftIdParam'
        - $ref: '#/components/parameters/IdempotencyKey'
      responses:
        '201':
          description: 公開成功（投稿作成）
          headers:
            Location:
              description: 作成された投稿のURL
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '400':
          description: 公開ブロック（スコア不足）
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostBlockedResponse'
        '503':
          description: スコアリング不可（外部障害/タイムアウト等）
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: レート制限超過
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/text:score:
    post:
      operationId: scoreText
      summary: テキストのスコアと改善提案（保存なし）
      tags: [Scoring]
      parameters:
        - $ref: '#/components/parameters/IdempotencyKey'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScoreRequest'
      responses:
        '200':
          description: 取得成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScoreResponse'
        '429':
          description: レート制限超過
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/posts:
    post:
      operationId: createPostDirect
      summary: 直接投稿（公開時スコアリング）
      description: 下書きを経由せず直接公開。スコア未達は400で提案返却。
      tags: [Posts]
      parameters:
        - $ref: '#/components/parameters/IdempotencyKey'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCreateRequest'
      responses:
        '201':
          description: 投稿作成成功
          headers:
            Location:
              description: 作成された投稿のURL
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '400':
          description: 投稿ブロック（スコア不足）
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostBlockedResponse'
        '503':
          description: スコアリング不可
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      operationId: listPosts
      summary: タイムライン取得（新着順）
      security: []
      tags: [Posts]
      parameters:
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/CursorParam'
      responses:
        '200':
          description: 取得成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/PostResponse'
                  nextCursor:
                    oneOf:
                      - type: string
                      - type: 'null'

  /v1/posts/{postId}:
    get:
      operationId: getPost
      summary: 投稿詳細の取得
      security: []
      tags: [Posts]
      parameters:
        - $ref: '#/components/parameters/PostIdParam'
      responses:
        '200':
          description: 取得成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '404':
          description: 見つからない
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      operationId: deletePost
      summary: 自分の投稿を削除（ソフト削除）
      tags: [Posts]
      parameters:
        - $ref: '#/components/parameters/PostIdParam'
      responses:
        '204':
          description: 取消成功（ボディなし）
        '404':
          description: 見つからない
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/posts/{postId}:restore:
    post:
      operationId: restorePost
      summary: 削除済み投稿の復元（30日以内）
      tags: [Posts]
      parameters:
        - $ref: '#/components/parameters/PostIdParam'
      responses:
        '200':
          description: 復元成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '404':
          description: 見つからない/復元期間切れ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/posts/{postId}/reactions:
    post:
      operationId: upsertReaction
      summary: ポジティブリアクションの付与（1ユーザー同時に1種類）
      description: 別種類を付与すると置き換え。同一種類は冪等（204）。
      tags: [Reactions]
      parameters:
        - $ref: '#/components/parameters/PostIdParam'
        - $ref: '#/components/parameters/IdempotencyKey'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReactionCreateRequest'
            examples:
              empathy:
                value:
                  type: EMPATHY
      responses:
        '201':
          description: 新規付与
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReactionResponse'
        '200':
          description: 種類置き換え
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReactionResponse'
        '204':
          description: 同一種類（冪等・変更なし）
        '404':
          description: 投稿が存在しない
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: レート制限超過
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      operationId: removeReaction
      summary: 自分のリアクション取り消し（タイプ指定不要）
      tags: [Reactions]
      parameters:
        - $ref: '#/components/parameters/PostIdParam'
      responses:
        '204':
          description: 取消成功（ボディなし）
        '404':
          description: 該当リアクションが存在しない
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/notifications:
    get:
      operationId: listNotifications
      summary: リアクション通知の一覧
      tags: [Notifications]
      parameters:
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/CursorParam'
      responses:
        '200':
          description: 取得成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/NotificationItem'
                  nextCursor:
                    oneOf:
                      - type: string
                      - type: 'null'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    refreshTokenCookie:
      type: apiKey
      in: cookie
      name: refresh_token
    googleOidc:
      type: openIdConnect
      openIdConnectUrl: https://accounts.google.com/.well-known/openid-configuration
    appleOidc:
      type: openIdConnect
      openIdConnectUrl: https://appleid.apple.com/.well-known/openid-configuration

  headers:
    X-RateLimit-Limit:
      description: このエンドポイントのレート制限上限
      schema:
        type: integer
    X-RateLimit-Remaining:
      description: 残り回数
      schema:
        type: integer
    X-RateLimit-Reset:
      description: リセットUNIX時間（秒）
      schema:
        type: integer

  parameters:
    PostIdParam:
      name: postId
      in: path
      required: true
      schema:
        type: string
        format: uuid
        x-id-format: uuidv7
      description: 投稿ID
    DraftIdParam:
      name: draftId
      in: path
      required: true
      schema:
        type: string
        format: uuid
        x-id-format: uuidv7
      description: 下書きID
    LimitParam:
      name: limit
      in: query
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
      description: 取得件数
    CursorParam:
      name: cursor
      in: query
      schema:
        type: string
      description: 続き取得用カーソル
    IdempotencyKey:
      name: Idempotency-Key
      in: header
      required: false
      schema:
        type: string
      description: 冪等性キー。重複作成を防止。

  schemas:
    AuthResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        token:
          type: string
          description: JWTアクセストークン（15分）
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          x-id-format: uuidv7
        email:
          type: string
          format: email
        displayName:
          type: string
        createdAt:
          type: string
          format: date-time

    DraftCreateRequest:
      type: object
      required: [text]
      properties:
        text:
          type: string
          maxLength: 2000
    DraftResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          x-id-format: uuidv7
        userId:
          type: string
          format: uuid
          x-id-format: uuidv7
        text:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    PostCreateRequest:
      type: object
      required: [text]
      properties:
        text:
          type: string
          maxLength: 2000
    PostResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          x-id-format: uuidv7
        userId:
          type: string
          format: uuid
          x-id-format: uuidv7
        text:
          type: string
        score:
          type: number
          format: float
          description: ポジティブ度（0.0-1.0）。保存時点の値。
        status:
          type: string
          enum: [approved]
        createdAt:
          type: string
          format: date-time
        reactions:
          type: object
          properties:
            LIKE:
              type: integer
              default: 0
            EMPATHY:
              type: integer
              default: 0
            THANKS:
              type: integer
              default: 0
            SUPPORT:
              type: integer
              default: 0
        myReaction:
          description: ログイン中ユーザーの自身のリアクション。未付与ならnull。
          oneOf:
            - $ref: '#/components/schemas/ReactionType'
            - type: 'null'

    PostBlockedResponse:
      type: object
      required: [error, score, suggestions]
      properties:
        error:
          type: string
          example: POST_BLOCKED
          description: 固定コード
        score:
          type: number
          format: float
          description: 判定スコア（しきい値未満）
        threshold:
          type: number
          format: float
          description: 運用しきい値（例: 0.70）
        suggestions:
          type: array
          minItems: 1
          maxItems: 3
          items:
            type: string
          example:
            - '率直な不満はありますが、解決に向けて一緒に考えたいです。'
            - '改善点を共有し、前向きな議論をしたいです。'
        explanation:
          type: string
          description: 簡潔な理由（MVPでは省略可能）

    ReactionType:
      type: string
      enum: [LIKE, EMPATHY, THANKS, SUPPORT]
      description: |
        いいね=LIKE, 共感=EMPATHY, 感謝=THANKS, 応援=SUPPORT
    ReactionCreateRequest:
      type: object
      required: [type]
      properties:
        type:
          $ref: '#/components/schemas/ReactionType'
    ReactionResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          x-id-format: uuidv7
        postId:
          type: string
          format: uuid
          x-id-format: uuidv7
        userId:
          type: string
          format: uuid
          x-id-format: uuidv7
        type:
          $ref: '#/components/schemas/ReactionType'
        createdAt:
          type: string
          format: date-time

    ScoreRequest:
      type: object
      required: [text]
      properties:
        text:
          type: string
          maxLength: 2000
    ScoreResponse:
      type: object
      properties:
        score:
          type: number
          format: float
        threshold:
          type: number
          format: float
        suggestions:
          type: array
          minItems: 1
          maxItems: 3
          items:
            type: string

    NotificationItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
          x-id-format: uuidv7
        type:
          type: string
          enum: [REACTION]
        actorUserId:
          type: string
          format: uuid
          x-id-format: uuidv7
        postId:
          type: string
          format: uuid
          x-id-format: uuidv7
        reactionType:
          $ref: '#/components/schemas/ReactionType'
        createdAt:
          type: string
          format: date-time

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: BAD_REQUEST
        message:
          type: string
        details:
          type: object
          additionalProperties: true

x-operational-policies:
  scoring:
    model: 'gemini-1.5-pro'  # 例: 実環境に応じて調整
    timeoutMs: 1000
    threshold: 0.70
    retry:
      maxAttempts: 2
      backoff: exponential
  rateLimits:
    anonymous:
      listPostsPerMinute: 60
      getPostPerMinute: 120
    perUser:
      createDraftPerMinute: 30
      publishPerMinute: 6
      reactionPerMinute: 30
      scoreTextPerMinute: 20
  privacy:
    piiMasking: true
    retention:
      posts: untilDeleted
      draftsDays: 90
      blockLogsDays: 30
      auditDays: 180
      accessLogsDays: 30
  i18n:
    defaultLang: ja
    supported: [ja]

