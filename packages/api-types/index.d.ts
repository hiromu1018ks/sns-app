/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = {
    "/healthz": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ヘルスチェック */
        get: operations["getHealthz"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/auth/providers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 利用可能な認証プロバイダ一覧
         * @description クライアントがログインUX構成のために使用。例: ['google','apple']。
         */
        get: operations["listAuthProviders"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/auth/bootstrap": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * セッションブートストラップ
         * @description IdPのIDトークンを検証し、Refresh Cookieを発行して初回アクセストークンを返却。
         */
        post: operations["bootstrapAuth"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * アクセストークンのリフレッシュ
         * @description HttpOnlyクッキーの`refresh_token`を用いて新しいアクセストークンを発行。
         */
        post: operations["refreshAccessToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * ログアウト（リフレッシュ無効化）
         * @description リフレッシュトークンを失効し、クッキーを削除。
         */
        post: operations["logout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/drafts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 下書き作成 */
        post: operations["createDraft"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/drafts/{draftId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 下書き取得 */
        get: operations["getDraft"];
        put?: never;
        post?: never;
        /** 下書き削除 */
        delete: operations["deleteDraft"];
        options?: never;
        head?: never;
        /** 下書き更新 */
        patch: operations["updateDraft"];
        trace?: never;
    };
    "/v1/drafts/{draftId}:publish": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 下書きの公開（ポジティブ度判定）
         * @description スコアがしきい値未満の場合は公開せず、提案を返却します。
         */
        post: operations["publishDraft"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/text:score": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** テキストのスコアと改善提案（保存なし） */
        post: operations["scoreText"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/posts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** タイムライン取得（新着順） */
        get: operations["listPosts"];
        put?: never;
        /**
         * 直接投稿（公開時スコアリング）
         * @description 下書きを経由せず直接公開。スコア未達は400で提案返却。
         */
        post: operations["createPostDirect"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/posts/{postId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 投稿詳細の取得 */
        get: operations["getPost"];
        put?: never;
        post?: never;
        /** 自分の投稿を削除（ソフト削除） */
        delete: operations["deletePost"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/posts/{postId}:restore": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 削除済み投稿の復元（30日以内） */
        post: operations["restorePost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/posts/{postId}/reactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * ポジティブリアクションの付与（1ユーザー同時に1種類）
         * @description 別種類を付与すると置き換え。同一種類は冪等（204）。
         */
        post: operations["upsertReaction"];
        /** 自分のリアクション取り消し（タイプ指定不要） */
        delete: operations["removeReaction"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/notifications": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** リアクション通知の一覧 */
        get: operations["listNotifications"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
};
export type webhooks = Record<string, never>;
export type components = {
    schemas: {
        AuthResponse: {
            user?: components["schemas"]["User"];
            /** @description JWTアクセストークン（15分） */
            token?: string;
        };
        AuthBootstrapRequest: {
            /** @enum {string} */
            provider: "google" | "apple";
            /** @description OIDC IdPのIDトークン */
            idToken: string;
        };
        User: {
            /** Format: uuid */
            id?: string;
            /** Format: email */
            email?: string;
            displayName?: string;
            /** Format: date-time */
            createdAt?: string;
        };
        DraftCreateRequest: {
            text: string;
        };
        DraftResponse: {
            /** Format: uuid */
            id?: string;
            /** Format: uuid */
            userId?: string;
            text?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        PostCreateRequest: {
            text: string;
        };
        PostResponse: {
            /** Format: uuid */
            id?: string;
            /** Format: uuid */
            userId?: string;
            text?: string;
            /**
             * Format: float
             * @description ポジティブ度（0.0-1.0）。保存時点の値。
             */
            score?: number;
            /** @enum {string} */
            status?: "approved";
            /** Format: date-time */
            createdAt?: string;
            reactions?: {
                /** @default 0 */
                LIKE: number;
                /** @default 0 */
                EMPATHY: number;
                /** @default 0 */
                THANKS: number;
                /** @default 0 */
                SUPPORT: number;
            };
            /** @description ログイン中ユーザーの自身のリアクション。未付与ならnull。 */
            myReaction?: components["schemas"]["ReactionType"] | null;
        };
        PostBlockedResponse: {
            /**
             * @description 固定コード
             * @example POST_BLOCKED
             */
            error: string;
            /**
             * Format: float
             * @description 判定スコア（しきい値未満）
             */
            score: number;
            /**
             * Format: float
             * @description 運用しきい値（例: 0.70）
             */
            threshold?: number;
            /** @example [
             *       "率直な不満はありますが、解決に向けて一緒に考えたいです。",
             *       "改善点を共有し、前向きな議論をしたいです。"
             *     ] */
            suggestions: string[];
            /** @description 簡潔な理由（MVPでは省略可能） */
            explanation?: string;
        };
        /**
         * @description いいね=LIKE, 共感=EMPATHY, 感謝=THANKS, 応援=SUPPORT
         *
         * @enum {string}
         */
        ReactionType: "LIKE" | "EMPATHY" | "THANKS" | "SUPPORT";
        ReactionCreateRequest: {
            type: components["schemas"]["ReactionType"];
        };
        ReactionResponse: {
            /** Format: uuid */
            id?: string;
            /** Format: uuid */
            postId?: string;
            /** Format: uuid */
            userId?: string;
            type?: components["schemas"]["ReactionType"];
            /** Format: date-time */
            createdAt?: string;
        };
        ScoreRequest: {
            text: string;
        };
        ScoreResponse: {
            /** Format: float */
            score?: number;
            /** Format: float */
            threshold?: number;
            suggestions?: string[];
        };
        NotificationItem: {
            /** Format: uuid */
            id?: string;
            /** @enum {string} */
            type?: "REACTION";
            /** Format: uuid */
            actorUserId?: string;
            /** Format: uuid */
            postId?: string;
            reactionType?: components["schemas"]["ReactionType"];
            /** Format: date-time */
            createdAt?: string;
        };
        ErrorResponse: {
            /** @example BAD_REQUEST */
            error?: string;
            message?: string;
            details?: {
                [key: string]: unknown;
            };
        };
    };
    responses: never;
    parameters: {
        /** @description 投稿ID */
        PostIdParam: string;
        /** @description 下書きID */
        DraftIdParam: string;
        /** @description 取得件数 */
        LimitParam: number;
        /** @description 続き取得用カーソル */
        CursorParam: string;
        /** @description 冪等性キー。重複作成を防止。 */
        IdempotencyKey: string;
    };
    requestBodies: never;
    headers: {
        /** @description このエンドポイントのレート制限上限 */
        "X-RateLimit-Limit": number;
        /** @description 残り回数 */
        "X-RateLimit-Remaining": number;
        /** @description リセットUNIX時間（秒） */
        "X-RateLimit-Reset": number;
    };
    pathItems: never;
};
export type $defs = Record<string, never>;
export interface operations {
    getHealthz: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listAuthProviders: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 取得成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        providers?: ("google" | "apple")[];
                    };
                };
            };
        };
    };
    bootstrapAuth: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AuthBootstrapRequest"];
            };
        };
        responses: {
            /** @description ブートストラップ成功（Refresh Cookie設定） */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthResponse"];
                };
            };
            /** @description 入力不正/IDトークン不正 */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description 認証失敗 */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    refreshAccessToken: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 更新成功 */
            200: {
                headers: {
                    "X-RateLimit-Limit": components["headers"]["X-RateLimit-Limit"];
                    "X-RateLimit-Remaining": components["headers"]["X-RateLimit-Remaining"];
                    "X-RateLimit-Reset": components["headers"]["X-RateLimit-Reset"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthResponse"];
                };
            };
            /** @description リフレッシュトークン無効/期限切れ */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    logout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ログアウト成功（ボディなし） */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createDraft: {
        parameters: {
            query?: never;
            header?: {
                /** @description 冪等性キー。重複作成を防止。 */
                "Idempotency-Key"?: components["parameters"]["IdempotencyKey"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DraftCreateRequest"];
            };
        };
        responses: {
            /** @description 作成成功 */
            201: {
                headers: {
                    /** @description 作成された下書きのURL */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DraftResponse"];
                };
            };
            /** @description 入力不正 */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description レート制限超過 */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getDraft: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 下書きID */
                draftId: components["parameters"]["DraftIdParam"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 取得成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DraftResponse"];
                };
            };
            /** @description 見つからない */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteDraft: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 下書きID */
                draftId: components["parameters"]["DraftIdParam"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 削除成功（ボディなし） */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 見つからない */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    updateDraft: {
        parameters: {
            query?: never;
            header?: {
                /** @description 冪等性キー。重複作成を防止。 */
                "Idempotency-Key"?: components["parameters"]["IdempotencyKey"];
            };
            path: {
                /** @description 下書きID */
                draftId: components["parameters"]["DraftIdParam"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DraftCreateRequest"];
            };
        };
        responses: {
            /** @description 更新成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DraftResponse"];
                };
            };
            /** @description 見つからない */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    publishDraft: {
        parameters: {
            query?: never;
            header?: {
                /** @description 冪等性キー。重複作成を防止。 */
                "Idempotency-Key"?: components["parameters"]["IdempotencyKey"];
            };
            path: {
                /** @description 下書きID */
                draftId: components["parameters"]["DraftIdParam"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 公開成功（投稿作成） */
            201: {
                headers: {
                    /** @description 作成された投稿のURL */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PostResponse"];
                };
            };
            /** @description 公開ブロック（スコア不足） */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PostBlockedResponse"];
                };
            };
            /** @description レート制限超過 */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description スコアリング不可（外部障害/タイムアウト等） */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    scoreText: {
        parameters: {
            query?: never;
            header?: {
                /** @description 冪等性キー。重複作成を防止。 */
                "Idempotency-Key"?: components["parameters"]["IdempotencyKey"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ScoreRequest"];
            };
        };
        responses: {
            /** @description 取得成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScoreResponse"];
                };
            };
            /** @description レート制限超過 */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listPosts: {
        parameters: {
            query?: {
                /** @description 取得件数 */
                limit?: components["parameters"]["LimitParam"];
                /** @description 続き取得用カーソル */
                cursor?: components["parameters"]["CursorParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 取得成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items?: components["schemas"]["PostResponse"][];
                        nextCursor?: string | null;
                    };
                };
            };
        };
    };
    createPostDirect: {
        parameters: {
            query?: never;
            header?: {
                /** @description 冪等性キー。重複作成を防止。 */
                "Idempotency-Key"?: components["parameters"]["IdempotencyKey"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PostCreateRequest"];
            };
        };
        responses: {
            /** @description 投稿作成成功 */
            201: {
                headers: {
                    /** @description 作成された投稿のURL */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PostResponse"];
                };
            };
            /** @description 投稿ブロック（スコア不足） */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PostBlockedResponse"];
                };
            };
            /** @description スコアリング不可 */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getPost: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 投稿ID */
                postId: components["parameters"]["PostIdParam"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 取得成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PostResponse"];
                };
            };
            /** @description 見つからない */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deletePost: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 投稿ID */
                postId: components["parameters"]["PostIdParam"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 取消成功（ボディなし） */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 見つからない */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    restorePost: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 投稿ID */
                postId: components["parameters"]["PostIdParam"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 復元成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PostResponse"];
                };
            };
            /** @description 見つからない/復元期間切れ */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    upsertReaction: {
        parameters: {
            query?: never;
            header?: {
                /** @description 冪等性キー。重複作成を防止。 */
                "Idempotency-Key"?: components["parameters"]["IdempotencyKey"];
            };
            path: {
                /** @description 投稿ID */
                postId: components["parameters"]["PostIdParam"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReactionCreateRequest"];
            };
        };
        responses: {
            /** @description 種類置き換え */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReactionResponse"];
                };
            };
            /** @description 新規付与 */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReactionResponse"];
                };
            };
            /** @description 同一種類（冪等・変更なし） */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 投稿が存在しない */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description レート制限超過 */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    removeReaction: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 投稿ID */
                postId: components["parameters"]["PostIdParam"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 取消成功（ボディなし） */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 該当リアクションが存在しない */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listNotifications: {
        parameters: {
            query?: {
                /** @description 取得件数 */
                limit?: components["parameters"]["LimitParam"];
                /** @description 続き取得用カーソル */
                cursor?: components["parameters"]["CursorParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 取得成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items?: components["schemas"]["NotificationItem"][];
                        nextCursor?: string | null;
                    };
                };
            };
        };
    };
}
